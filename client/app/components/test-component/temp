<div class="row">
  <div class="col-lg-8 col-lg-offset-2 col-md-8 col-md-offset-2 col-xs-12">
    <div class="panel"
      id='chat' [style.top.px]='y'
      [style.left.px]='x'
      [style.width.px]='width'
      [style.height.px]='height'
      (mousedown)='onWindowPress($event)'
      (mousemove)='onWindowDrag($event)'
    >
      <div (mousedown)='onCornerClick($event, topLeftResize)' id='chat-top-left-resize' class='chat-corner-resize'></div>    
      <div (mousedown)='onCornerClick($event, topRightResize)' id='chat-top-right-resize' class='chat-corner-resize'></div>    
      <div (mousedown)='onCornerClick($event, bottomLeftResize)' id='chat-bottom-left-resize' class='chat-corner-resize'></div>    
      <div (mousedown)='onCornerClick($event, bottomRightResize)' id='chat-bottom-right-resize' class='chat-corner-resize'></div> 
      <div class="panel-header">
        <h3 class="panel-title">
          Thử nghiệm
        </h3>
      </div>
      <div class="panel-content">
        <!--<table class="imc-table">

          <thead>
            <tr>
              <th>Name</th>
              <th>ID</th>
              <th>Favorite Color</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td data-hearder="Movie Title" (click)="testClick($event)">Jim</td>
              <td data-hearder="Movie Title">00001</td>
              <td data-hearder="Movie Title">Blue</td>
            </tr>
            <tr>
              <td data-hearder="Movie Title" (click)="testClick($event)">Jim</td>
              <td data-hearder="Movie Title">00001</td>
              <td data-hearder="Movie Title">Blue</td>
            </tr>
            <tr>
              <td data-hearder="Movie Title" (click)="testClick($event)">Jim</td>
              <td data-hearder="Movie Title">00001</td>
              <td data-hearder="Movie Title">Blue</td>
            </tr>
          </tbody>
        </table>-->
      </div>
    </div>
  </div>
</div>

--------------------------------------------------------



#chat {
    position: fixed;
    background-color: black;
    opacity: 0.8;
}
.chat-corner-resize {
    position: absolute;
    width: 10px;
    height: 10px;
}
#chat-top-left-resize { top: 0px; left: 0px; width: 3px; height: 100%; cursor: ew-resize; }
#chat-top-right-resize { top: 0px; right: 0px; width: 3px; height: 100%; cursor: ew-resize; }

---------------------------------------------------------
  x: number;
  y: number;
  px: number;
  py: number;
  width: number;
  height: number;
  minArea: number;
  draggingCorner: boolean;
  draggingWindow: boolean;
  resizer: Function;

  constructor() { 
    this.x = 300;
    this.y = 100;
    this.px = 0;
    this.py = 0;
    this.width = 600;
    this.height = 300; 
    this.draggingCorner = false;
    this.draggingWindow = false;
    this.minArea = 20000
  }

  ngOnInit() {
  }

  area() {
    return this.width * this.height;
  }

  onWindowPress(event: MouseEvent) {
    //this.draggingWindow = true;
    this.px = event.clientX;
    this.py = event.clientY;
  }

  onWindowDrag(event: MouseEvent) {
     if (!this.draggingWindow) {
        return;
    }
    let offsetX = event.clientX - this.px;
    let offsetY = event.clientY - this.py;

    this.x += offsetX;
    this.y += offsetY;
    this.px = event.clientX;
    this.py = event.clientY;
  }

  topLeftResize(offsetX: number, offsetY: number) {
    this.x += offsetX;
    //this.y += offsetY;
    this.width -= offsetX;
    //this.height -= offsetY;
  }

  topRightResize(offsetX: number, offsetY: number) {
    //this.y += offsetY;
    this.width += offsetX;
    //this.height -= offsetY;
  }

  bottomLeftResize(offsetX: number, offsetY: number) {
    this.x += offsetX;
    this.width -= offsetX;
    //this.height += offsetY;
  }

  bottomRightResize(offsetX: number, offsetY: number) {
    this.width += offsetX;
    //this.height += offsetY;
  }

  onCornerClick(event: MouseEvent, resizer?: Function) {
    this.draggingCorner = true;
    this.px = event.clientX;
    //this.py = event.clientY;
    this.resizer = resizer;
    event.preventDefault();
    event.stopPropagation();
  }

  @HostListener('document:mousemove', ['$event'])
  onCornerMove(event: MouseEvent) {
    if (!this.draggingCorner) {
        return;
    }
    let offsetX = event.clientX - this.px;
    let offsetY = event.clientY - this.py;

    let lastX = this.x;
    let lastY = this.y;
    let pWidth = this.width;
    //let pHeight = this.height;

    this.resizer(offsetX, offsetY);
    if (this.area() < this.minArea) {
        this.x = lastX;
        this.y = lastY;
        this.width = pWidth;
        //this.height = this.height;
        //this.height = pHeight;
    }
    this.px = event.clientX;
    this.py = event.clientY;
  }

  @HostListener('document:mouseup', ['$event'])
  onCornerRelease(event: MouseEvent) {
    this.draggingWindow = false;
    this.draggingCorner = false;
  }